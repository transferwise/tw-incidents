apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'checkstyle'
apply plugin: 'com.github.spotbugs'

group = 'com.transferwise.common'

repositories {
    mavenCentral()
    mavenLocal()
}

apply from: "${project.rootDir}/build.libraries.gradle"

configurations {
    local {
        canBeResolved(false)
        canBeConsumed(false)
    }
    compileClasspath {
        extendsFrom(local)
    }
    runtimeClasspath {
        extendsFrom(local)
    }
    testCompileClasspath {
        extendsFrom(local)
    }
    testRuntimeClasspath {
        extendsFrom(local)
    }
    annotationProcessor {
        extendsFrom(local)
    }
    testAnnotationProcessor {
        extendsFrom(local)
    }
}

dependencies {
    local platform(libraries.springBootDependencies)

    compileOnly libraries.lombok
    annotationProcessor libraries.lombok
    annotationProcessor libraries.springBootConfigurationProcessor
    testCompileOnly libraries.lombok
    testAnnotationProcessor libraries.lombok

    compileOnly libraries.spotbugsAnnotations
}

java {
    if (springBootVersion.startsWith("3.")) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    else{
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Transferwise Base Utils",
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardError"
        showStackTraces = true
        exceptionFormat = 'full'
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"
    excludeFilter = file("${project.rootDir}/spotbugs-exclude.xml")
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs {
    spotbugsTest.enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file("${project.rootDir}/google_checks.xml"))

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}
